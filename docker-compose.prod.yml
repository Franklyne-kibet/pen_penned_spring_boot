version: '3.8'

services:
  # Spring Boot Application
  blog-app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.prod
    environment:
      JAVA_TOOL_OPTIONS: -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8080"
    deploy:
      replicas: 3
      update_config:
        order: start-first
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '2'
          memory: 2G
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - blog-app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pg-data:/var/lib/postgresql/data
      - ./db-backups:/backups
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - blog-app-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/ssl
      - ./static:/var/www/static:ro
    depends_on:
      - blog-app
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - blog-app-network
      - frontend-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - blog-app-network

  # Certbot for SSL (Let's Encrypt)
  certbot:
    image: certbot/certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./static:/var/www/static
    entrypoint: |
      sh -c 'certbot certonly --webroot -w /var/www/static -d $$DOMAIN --email $$EMAIL --agree-tos --non-interactive --keep-until-expiring &&
      cp /etc/letsencrypt/live/$$DOMAIN/fullchain.pem /etc/ssl/cert.pem &&
      cp /etc/letsencrypt/live/$$DOMAIN/privkey.pem /etc/ssl/key.pem &&
      sleep 6h & wait $${!}'
    environment:
      - DOMAIN=yourdomain.com
      - EMAIL=admin@yourdomain.com
    networks:
      - frontend-network
    depends_on:
      - nginx

volumes:
  pg-data:
  redis-data:

networks:
  blog-app-network:
    driver: bridge
  frontend-network:
    driver: bridge